/*
 * PagarmeAPI.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Linq;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using APIMATIC.SDK.Common;

namespace PagarmeAPI.Standard.Models
{
    [JsonConverter(typeof(StringValuedEnumConverter))]
    public enum TransactionStatus
    {
        PROCESSING, //Transação está em processo de autorização.
        AUTHORIZED, //Transação foi autorizada. Cliente possui saldo na conta e este valor foi reservado para futura captura, que deve acontecer em até 5 dias para transações criadas com api_key. Caso não seja capturada, a autorização é cancelada automaticamente pelo banco emissor, e o status dela permanece como 'authorized'.
        PAID, //Transação paga. Foi autorizada e capturada com sucesso. Para Boleto, significa que nossa API já identificou o pagamento de seu cliente.
        REFUNDED, //Transação estornada completamente.
        WAITING_PAYMENT, //Transação aguardando pagamento (status válido para Boleto bancário).
        PENDING_REFUND, //Transação do tipo Boleto e que está aguardando confirmação do estorno solicitado.
        REFUSED, //Transação recusada, não autorizada.
        CHARGEDBACK, //Transação sofreu chargeback.
        ANALYZING, //Transação encaminhada para a análise manual feita por um especialista em prevenção a fraude.
        PENDING_REVIEW, //Transação pendente de revisão manual por parte do lojista. Uma transação ficará com esse status por até 48 horas corridas.
    }

    /// <summary>
    /// Helper for the enum type TransactionStatus
    /// </summary>
    public static class TransactionStatusHelper
    {
        //string values corresponding the enum elements
        private static List<string> stringValues = new List<string> { "processing", "authorized", "paid", "refunded", "waiting_payment", "pending_refund", "refused", "chargedback", "analyzing", "pending_review" };

        /// <summary>
        /// Converts a TransactionStatus value to a corresponding string value
        /// </summary>
        /// <param name="enumValue">The TransactionStatus value to convert</param>
        /// <returns>The representative string value</returns>
        public static string ToValue(TransactionStatus enumValue)
        {
            switch(enumValue)
            {
                //only valid enum elements can be used
                //this is necessary to avoid errors
                case TransactionStatus.PROCESSING:
                case TransactionStatus.AUTHORIZED:
                case TransactionStatus.PAID:
                case TransactionStatus.REFUNDED:
                case TransactionStatus.WAITING_PAYMENT:
                case TransactionStatus.PENDING_REFUND:
                case TransactionStatus.REFUSED:
                case TransactionStatus.CHARGEDBACK:
                case TransactionStatus.ANALYZING:
                case TransactionStatus.PENDING_REVIEW:
                    return stringValues[(int)enumValue];

                //an invalid enum value was requested
                default:
                    return null;
            }
        }

        /// <summary>
        /// Convert a list of TransactionStatus values to a list of strings
        /// </summary>
        /// <param name="enumValues">The list of TransactionStatus values to convert</param>
        /// <returns>The list of representative string values</returns>
        public static List<string> ToValue(List<TransactionStatus> enumValues)
        {
            if (null == enumValues)
                return null;

            return enumValues.Select(eVal => ToValue(eVal)).ToList();
        }

        /// <summary>
        /// Converts a string value into TransactionStatus value
        /// </summary>
        /// <param name="value">The string value to parse</param>
        /// <returns>The parsed TransactionStatus value</returns>
        public static TransactionStatus ParseString(string value)
        {
            int index = stringValues.IndexOf(value);
            if(index < 0)
                throw new InvalidCastException(string.Format("Unable to cast value: {0} to type TransactionStatus", value));

            return (TransactionStatus) index;
        }
    }
} 