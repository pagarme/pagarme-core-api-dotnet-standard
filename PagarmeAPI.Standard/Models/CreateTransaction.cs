/*
 * PagarmeAPI.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using APIMATIC.SDK.Common;


namespace PagarmeAPI.Standard.Models
{
    public class CreateTransaction : BaseModel 
    {
        // These fields hold the values for the public properties.
        private int amount;
        private string cardNumber;
        private string cardCvv;
        private string cardExpirationDate;
        private string cardHolderName;
        private Models.Customer customer;
        private Models.Billing billing;
        private Models.Shipping shipping;
        private List<Models.TransactionItem> items;
        private bool capture = true;
        private List<Models.SplitRule> splitRules;
        private string cardId;
        private string cardHash;
        private int? installments;
        private Models.PaymentMethod paymentMethod;
        private Dictionary<string, string> metadata;
        private string softDescriptor;
        private bool? masync;
        private string boletoInstructions;
        private DateTime? boletoExpirationDate;
        private string postbackUrl;
        private Models.PrivateLabel privateLabel;
        private string referenceKey;
        private DateTime? pixExpirationDate;
        private List<Models.PixAdditionalFields> pixAdditionalFields;
        private string apiKey;

        /// <summary>
        /// Valor a ser cobrado. Deve ser passado em centavos. Ex: R$ 10.00 = 1000. Deve ser no mínimo 1 real (100)
        /// </summary>
        [JsonProperty("amount")]
        public int Amount 
        { 
            get 
            {
                return this.amount; 
            } 
            set 
            {
                this.amount = value;
                onPropertyChanged("Amount");
            }
        }

        /// <summary>
        /// Número do cartão. OBS: apenas para transações de Cartão de crédito você deve passar o 'card_number'.
        /// </summary>
        [JsonProperty("card_number")]
        public string CardNumber 
        { 
            get 
            {
                return this.cardNumber; 
            } 
            set 
            {
                this.cardNumber = value;
                onPropertyChanged("CardNumber");
            }
        }

        /// <summary>
        /// Código verificador do cartão. OBS: apenas para transações de Cartão de crédito você deve passar o 'card_cvv'.
        /// </summary>
        [JsonProperty("card_cvv")]
        public string CardCvv 
        { 
            get 
            {
                return this.cardCvv; 
            } 
            set 
            {
                this.cardCvv = value;
                onPropertyChanged("CardCvv");
            }
        }

        /// <summary>
        /// Data de validade do cartão no formato MMAA. OBS: apenas para transações de Cartão de crédito você deve passar o 'card_expiration_date'.
        /// </summary>
        [JsonProperty("card_expiration_date")]
        public string CardExpirationDate 
        { 
            get 
            {
                return this.cardExpirationDate; 
            } 
            set 
            {
                this.cardExpirationDate = value;
                onPropertyChanged("CardExpirationDate");
            }
        }

        /// <summary>
        /// Nome do portador do cartão. OBS: apenas para transações de Cartão de crédito você deve passar o 'card_holder_name'.
        /// </summary>
        [JsonProperty("card_holder_name")]
        public string CardHolderName 
        { 
            get 
            {
                return this.cardHolderName; 
            } 
            set 
            {
                this.cardHolderName = value;
                onPropertyChanged("CardHolderName");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("customer")]
        public Models.Customer Customer 
        { 
            get 
            {
                return this.customer; 
            } 
            set 
            {
                this.customer = value;
                onPropertyChanged("Customer");
            }
        }

        /// <summary>
        /// Obrigatório com o antifraude habilitado. Define os dados de cobrança, como nome e endereço.
        /// </summary>
        [JsonProperty("billing")]
        public Models.Billing Billing 
        { 
            get 
            {
                return this.billing; 
            } 
            set 
            {
                this.billing = value;
                onPropertyChanged("Billing");
            }
        }

        /// <summary>
        /// Define os dados de envio da compra, como nome do recebedor, valor do envio e endereço de recebimento. Deve ser preenchido no caso da venda de bem físico.
        /// </summary>
        [JsonProperty("shipping")]
        public Models.Shipping Shipping 
        { 
            get 
            {
                return this.shipping; 
            } 
            set 
            {
                this.shipping = value;
                onPropertyChanged("Shipping");
            }
        }

        /// <summary>
        /// Obrigatório com o antifraude habilitado. Define os dados dos itens vendidos, como nome, preço unitário e quantidade.
        /// </summary>
        [JsonProperty("items")]
        public List<Models.TransactionItem> Items 
        { 
            get 
            {
                return this.items; 
            } 
            set 
            {
                this.items = value;
                onPropertyChanged("Items");
            }
        }

        /// <summary>
        /// Após a autorização de uma transação, você pode escolher se irá capturar ou adiar a captura do valor. Caso opte por postergar a captura, atribua o valor 'false'.
        /// </summary>
        [JsonProperty("capture")]
        public bool Capture 
        { 
            get 
            {
                return this.capture; 
            } 
            set 
            {
                this.capture = value;
                onPropertyChanged("Capture");
            }
        }

        /// <summary>
        /// Regras de divisão da transação.
        /// </summary>
        [JsonProperty("split_rules")]
        public List<Models.SplitRule> SplitRules 
        { 
            get 
            {
                return this.splitRules; 
            } 
            set 
            {
                this.splitRules = value;
                onPropertyChanged("SplitRules");
            }
        }

        /// <summary>
        /// Ao realizar uma transação, retornamos o 'card_id' do cartão, para que nas próximas transações ele possa ser utilizado como forma de identificar os dados de pagamento. Exemplo de utilização: One-click buy. OBS: apenas para transações de Cartão de crédito você deve passar o 'card_hash' ou 'card_id'.
        /// </summary>
        [JsonProperty("card_id")]
        public string CardId 
        { 
            get 
            {
                return this.cardId; 
            } 
            set 
            {
                this.cardId = value;
                onPropertyChanged("CardId");
            }
        }

        /// <summary>
        /// Informações do cartão do cliente criptografadas em sua aplicação. OBS: apenas para transações de Cartão de crédito você deve passar o 'card_hash' ou 'card_id'.
        /// </summary>
        [JsonProperty("card_hash")]
        public string CardHash 
        { 
            get 
            {
                return this.cardHash; 
            } 
            set 
            {
                this.cardHash = value;
                onPropertyChanged("CardHash");
            }
        }

        /// <summary>
        /// Número de parcelas da transação, sendo mínimo: 1 e Máximo: 12. OBS: Se o pagamento for boleto, o padrão é 1.
        /// </summary>
        [JsonProperty("installments")]
        public int? Installments 
        { 
            get 
            {
                return this.installments; 
            } 
            set 
            {
                this.installments = value;
                onPropertyChanged("Installments");
            }
        }

        /// <summary>
        /// Método de pagamento da transação. Aceita dois tipos: credit_card e boleto.
        /// </summary>
        [JsonProperty("payment_method", ItemConverterType = typeof(StringValuedEnumConverter))]
        public Models.PaymentMethod PaymentMethod 
        { 
            get 
            {
                return this.paymentMethod; 
            } 
            set 
            {
                this.paymentMethod = value;
                onPropertyChanged("PaymentMethod");
            }
        }

        /// <summary>
        /// Você pode passar dados adicionais na criação da transação para facilitar uma futura análise de dados tanto em nossa dashboard, quanto por seus sistemas. Ex: metadata[ idProduto ]=13933139.
        /// </summary>
        [JsonProperty("metadata")]
        public Dictionary<string, string> Metadata 
        { 
            get 
            {
                return this.metadata; 
            } 
            set 
            {
                this.metadata = value;
                onPropertyChanged("Metadata");
            }
        }

        /// <summary>
        /// Descrição que aparecerá na fatura depois do nome de sua empresa. Máximo de 13 caracteres, sendo alfanuméricos e espaços.
        /// </summary>
        [JsonProperty("soft_descriptor")]
        public string SoftDescriptor 
        { 
            get 
            {
                return this.softDescriptor; 
            } 
            set 
            {
                this.softDescriptor = value;
                onPropertyChanged("SoftDescriptor");
            }
        }

        /// <summary>
        /// Utilize false caso queira manter o processamento síncrono de uma transação. Ou seja, a resposta da transação é recebida na hora.
        /// </summary>
        [JsonProperty("async")]
        public bool? Async 
        { 
            get 
            {
                return this.masync; 
            } 
            set 
            {
                this.masync = value;
                onPropertyChanged("Async");
            }
        }

        /// <summary>
        /// Campo instruções do boleto. Máximo de 255 caracteres.
        /// </summary>
        [JsonProperty("boleto_instructions")]
        public string BoletoInstructions 
        { 
            get 
            {
                return this.boletoInstructions; 
            } 
            set 
            {
                this.boletoInstructions = value;
                onPropertyChanged("BoletoInstructions");
            }
        }

        /// <summary>
        /// Prazo limite para pagamento do boleto. Deve ser passado no formato yyyy-MM-dd.Default: data atual + 7 dias.
        /// </summary>
        [JsonConverter(typeof(CustomDateTimeConverter), "yyyy'-'MM'-'dd")]
        [JsonProperty("boleto_expiration_date")]
        public DateTime? BoletoExpirationDate 
        { 
            get 
            {
                return this.boletoExpirationDate; 
            } 
            set 
            {
                this.boletoExpirationDate = value;
                onPropertyChanged("BoletoExpirationDate");
            }
        }

        /// <summary>
        /// Endpoint do seu sistema que receberá informações a cada atualização da transação. Caso você defina este parâmetro, o processamento da transação se torna assíncrono.
        /// </summary>
        [JsonProperty("postback_url")]
        public string PostbackUrl 
        { 
            get 
            {
                return this.postbackUrl; 
            } 
            set 
            {
                this.postbackUrl = value;
                onPropertyChanged("PostbackUrl");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("private_label")]
        public Models.PrivateLabel PrivateLabel 
        { 
            get 
            {
                return this.privateLabel; 
            } 
            set 
            {
                this.privateLabel = value;
                onPropertyChanged("PrivateLabel");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("reference_key")]
        public string ReferenceKey 
        { 
            get 
            {
                return this.referenceKey; 
            } 
            set 
            {
                this.referenceKey = value;
                onPropertyChanged("ReferenceKey");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("pix_expiration_date")]
        public DateTime? PixExpirationDate 
        { 
            get 
            {
                return this.pixExpirationDate; 
            } 
            set 
            {
                this.pixExpirationDate = value;
                onPropertyChanged("PixExpirationDate");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("pix_additional_fields")]
        public List<Models.PixAdditionalFields> PixAdditionalFields 
        { 
            get 
            {
                return this.pixAdditionalFields; 
            } 
            set 
            {
                this.pixAdditionalFields = value;
                onPropertyChanged("PixAdditionalFields");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("api_key")]
        public string ApiKey 
        { 
            get 
            {
                return this.apiKey; 
            } 
            set 
            {
                this.apiKey = value;
                onPropertyChanged("ApiKey");
            }
        }
    }
} 